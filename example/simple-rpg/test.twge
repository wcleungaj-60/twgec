// Constant Definition
const INSTANCE_ANGLE = "{instance.bodyRotation}*180/3.14";
const WIND_STAFF_ENBLAST_DAMAGE = "{instance.INT} + {instance.PSY}/2 + 10";
const HP_FORMULA = "98 + 10*{instance.CON} + 2*{instance.Level}";
const RECOVERY_FORMULA = "1 + {instance.PSY} + {instance.CON}/2";
const STATUS_TEXT = 
"【Lv{{instance.id}.Level}】\n" +
"Exp:{{instance.id}.Exp}/{{instance.id}.ExpNeeded}\n" +
"尚餘能力點：{{instance.id}.Point}\n" +
"力量：{{instance.id}.STR}\n" +
"體質：{{instance.id}.CON}\n" +
"敏捷：{{instance.id}.AGI}\n" +
"智慧：{{instance.id}.INT}\n" +
"精神：{{instance.id}.PSY}";
const SPAWN_POINT = Point(10,10);
const DEBUG_MODE = false;
const USER_STATE_CATEGORY = "simple-rpg-test";

// Metadata Setting
__skydowLocs__ = SPAWN_POINT;
__royalLocs__ = SPAWN_POINT;
__thirdLocs__ = SPAWN_POINT;
__lives__ = 9999;
__title__ = "RPG試驗";
__useDefaultItems__ = true;
__useCustomWeapons__ = true;
__customWeapons__ = [
    CustomWeapon(reference = "TWilightGameEventCompiler.weapon_wind_staff", code = "wind_staff", damage = 5, fireType = "單手橫劈",
    pivotOnHandDegree = 58, pivotOnHandX = 2, pivotOnHandY = 9, pivotOnHandXScale = "1.3", pivotOnHandYScale = "1.5",
    pivotOnIconDegree = -40, pivotOnIconX = 20, pivotOnIconY = 20),
    CustomWeapon(reference = "TWilightGameEventCompiler.weapon_iron_sword", code = "iron_sword", damage = 30, fireType = "大刀砍劈",
    pivotOnHandDegree = 35, pivotOnHandX = -12,
    pivotOnIconDegree = -40, pivotOnIconX = 27, pivotOnIconY = 14)
];
__map__ = "CG.TWilightGameEventCompiler/rpg/simple_rpg.twmap";
__roomSize__ = 8;

//-------------------debug-------------------//
def debug(text): actions {
    if(DEBUG_MODE) {
        print(type = "error", text = text);
    }
}

//-------------------biMapWarp-------------------//
def biMapWarp(x1, y1, x2, y2): actions {
    if (x1 == x2 && y1 < y2) {
        mapWarp(fromX = x1, fromY = y1, toX = x2, toY = y2, direction = "下");
        mapWarp(fromX = x2, fromY = y2, toX = x1, toY = y1, direction = "上");
    }
    if (x1 == x2 && y1 > y2) {
        mapWarp(fromX = x1, fromY = y1, toX = x2, toY = y2, direction = "上");
        mapWarp(fromX = x2, fromY = y2, toX = x1, toY = y1, direction = "下");
    }
    if (x1 > x2 && y1 == y2) {
        mapWarp(fromX = x1, fromY = y1, toX = x2, toY = y2, direction = "左");
        mapWarp(fromX = x2, fromY = y2, toX = x1, toY = y1, direction = "右");
    }
    if (x1 < x2 && y1 == y2) {
        mapWarp(fromX = x1, fromY = y1, toX = x2, toY = y2, direction = "右");
        mapWarp(fromX = x2, fromY = y2, toX = x1, toY = y1, direction = "左");
    }
    if (x1 == x2 && y1 == y2) {
        print(type = "error", text = "Cannot set the same point as the mapWarp src and dst");
    }
    if (x1 != x2 && y1 != y2) {
        print(type = "error", text = "Bidirectional mapWarp requires x or y to be the same value");
    }
}

//-------------------UpdatePlayerAttributes-------------------//
def updatePlayerAttributes(actorId): actions {
    setObjectVar(key = "HP", object = actorId, type = "integer", value = "98 + 10*{"+actorId+".CON} + 2*{"+actorId+".Level}");
    actorAttributes(actorId = actorId, attr = "maxHp", value = "{"+actorId+".HP}");
    actorAttributes(actorId = actorId, attr = "closeWeaponSpeed", value = "4-3/(1+0.05*{"+actorId+".AGI})");
    actorAttributes(actorId = actorId, attr = "weight", value = "3*pow(0.97,{"+actorId+".AGI})");
}

//-------------------Load Store Handling-----------------//
def setObjectVarFromUserState(key) : actions {
    getUserState(category = USER_STATE_CATEGORY, key = key, playerId = "{instance}", varName = "{instance}_"+key);
    setObjectVar(key = key, object = "instance", type = "integer", value = "{{instance}_"+key+"}");
}
def setUserStateFromObjectVar(key) : actions {
    setUserState(category = USER_STATE_CATEGORY, key = key, playerId = "{instance}", type = "string", value = "{{instance}."+key+"}");
}

def loadStateDef(hasSavedBefore) : block {
    __repeat__ = -1;
    checks {
        forEachActor(actor = ActorMatch(controller = "player"), varname = "instance");
        checkNumber(lhs = "{instance.completedInit}", op = "==", rhs = 1);
        if(hasSavedBefore) {
            checkString(str = "{{instance}_savedBefore}", matchKind = "equal", value = "1");
        }
        if(hasSavedBefore == false) {
            checkString(str = "{{instance}_savedBefore}", matchKind = "equal", value = "undefined");
        } 
    }
    actions {
        setObjectVar(key = "completedInit", object = "instance", type = "string", value = 2);
        if(hasSavedBefore) {
            setObjectVarFromUserState("Point");
            setObjectVarFromUserState("ExpNeeded");
            setObjectVarFromUserState("Level");
            setObjectVarFromUserState("STR");
            setObjectVarFromUserState("CON");
            setObjectVarFromUserState("AGI");
            setObjectVarFromUserState("INT");
            setObjectVarFromUserState("PSY");
            setObjectVarFromUserState("Exp");
            setObjectVarFromUserState("HP");
            updatePlayerAttributes("instance");
            deltaHp(actorCode = "instance", type = "heal", value = 9999);
        }
    }
}
block loadStateSaved = loadStateDef(hasSavedBefore = true);
block loadStateNew = loadStateDef(hasSavedBefore = false);

def saveUserState() : actions {
    setUserStateFromObjectVar("Point");
    setUserStateFromObjectVar("ExpNeeded");
    setUserStateFromObjectVar("Level");
    setUserStateFromObjectVar("STR");
    setUserStateFromObjectVar("CON");
    setUserStateFromObjectVar("AGI");
    setUserStateFromObjectVar("INT");
    setUserStateFromObjectVar("PSY");
    setUserStateFromObjectVar("Exp");
    setUserStateFromObjectVar("HP");
    setUserState(category = USER_STATE_CATEGORY, key = "savedBefore", playerId = "{instance}", type = "integer", value = "1");
}

// Block Function Definition
def clickIncreaseDef(type, typeZh) : block {
    __repeat__ = -1;
    triggers {
        clickButton(varName = "instance", buttonId = "increase" + type);
    }
    checks {
        checkNumber(lhs = "{instance.Point}", op = ">", rhs = 0);
    }
    actions {
        setObjectVar(key = "Point", object = "instance", type = "integer", value = "{instance.Point}-1");
        setObjectVar(key = type, object = "instance", type = "integer", value = "{instance."+type+"}+1");
        actorTalk(actorId = "instance", text = "成功提升一點" + typeZh + "，尚餘{instance.Point}點能力點");
        updatePlayerAttributes("instance");
        saveUserState();
    }
}

def releasePowerDef(weapon) : block {
    __repeat__ = -1;
    triggers {
        releasePower(varName = "instance", weapon = weapon);
    }
    actions {
        if(weapon == "custom_wind_staff") {
        enblastEffect(fromActor = "instance", scale = "0.5", damage = WIND_STAFF_ENBLAST_DAMAGE, toAngle = INSTANCE_ANGLE + 32);
        enblastEffect(fromActor = "instance", scale = "0.5", damage = WIND_STAFF_ENBLAST_DAMAGE, toAngle = INSTANCE_ANGLE + 16);
        enblastEffect(fromActor = "instance", scale = "0.5", damage = WIND_STAFF_ENBLAST_DAMAGE, toAngle = INSTANCE_ANGLE);
        enblastEffect(fromActor = "instance", scale = "0.5", damage = WIND_STAFF_ENBLAST_DAMAGE, toAngle = INSTANCE_ANGLE - 16);
        enblastEffect(fromActor = "instance", scale = "0.5", damage = WIND_STAFF_ENBLAST_DAMAGE, toAngle = INSTANCE_ANGLE - 32);
        }
        if(weapon == "custom_iron_sword") {
            deltaHp(actorCode = "instance", value = "{instance.HP}/4");
        }
    }
}

block clickIncreaseSTR = clickIncreaseDef("STR", "力量");
block clickIncreaseCON = clickIncreaseDef("CON", "體質");
block clickIncreaseAGI = clickIncreaseDef("AGI", "敏捷");
block clickIncreaseINT = clickIncreaseDef("INT", "智慧");
block clickIncreasePSY = clickIncreaseDef("PSY", "精神");

block releasePowerWindStaff = releasePowerDef("custom_wind_staff");
block releasePowerIronSword = releasePowerDef("custom_iron_sword");

// Block Implementation

block clickResetPoint {
    __repeat__ = -1;
    triggers {
        clickButton(varName = "instance", buttonId = "ResetPoint");
    }
    actions {
        setObjectVar(key = "Point", object = "instance", type = "integer", value = "{instance.Level}*2+3");
        setObjectVar(key = "STR", object = "instance", type = "integer", value = 0);
        setObjectVar(key = "CON", object = "instance", type = "integer", value = 0);
        setObjectVar(key = "AGI", object = "instance", type = "integer", value = 0);
        setObjectVar(key = "INT", object = "instance", type = "integer", value = 0);
        setObjectVar(key = "PSY", object = "instance", type = "integer", value = 0);
        actorTalk(actorId = "instance", text = "成功重設能力點，目前有{instance.Point}點能力點");
        updatePlayerAttributes("instance");
        saveUserState();
    }
}

block monsterDead {
    __repeat__ = -1;
    triggers {
        actorDead(actor = ActorMatch(id = "monster"), hitterVarName = "instance");
    }
    actions {
        setObjectVar(key = "Exp", object = "instance", type = "integer", value = "{instance.Exp}+1");
        saveUserState();
        // TODO: Add item
        // TODO: Popup text
        // TODO: Call event
    }
}

block monsterSpawn {
    __repeat__ = -1;
    __repeatInterval__ = 8000;
    checks {
        actorCount(actor = ActorMatch(id = "monster_deer", matchKind = "contain"), op = "<", value = "5");
    }
    actions {
        addActor(name = "鹿(60)", id = "monster_deer*", camp = "第三", 
                hp = 60, x = "random(21,40)", y = "random(0,19)", localVarname = "actor", 
                weapon1 = "fist", weapon2 = "fist", strength = "10", role = "鹿");
        actorFollow(actorId = "actor", type = "跟隨自己");
    }
}

block levelUp {
    __repeat__ = -1;
    checks {
        forEachActor(actor = ActorMatch(controller = "玩家"), varname = "instance");
        checkNumber(lhs = "{instance.Exp}", op = ">=", rhs = "{instance.ExpNeeded}");
    }
    actions {
        setObjectVar(key = "Exp", object = "instance", type = "integer", value = "{instance.Exp}-{instance.ExpNeeded}");
        setObjectVar(key = "Level", object = "instance", type = "integer", value = "{instance.Level}+1");
        setObjectVar(key = "Point", object = "instance", type = "integer", value = "{instance.Point}+2");
        setObjectVar(key = "ExpNeeded", object = "instance", type = "integer", value = "{instance.Level}*2+4");
        setObjectVar(key = "HP", object = "instance", type = "integer", value = HP_FORMULA);
        actorAttributes(actorId = "instance", attr = "maxHp", value = "{instance.HP}");
        saveUserState();
    }
}

block recover {
    __repeat__ = -1;
    __repeatInterval__ = 10000;
    checks {
        forEachActor(actor = ActorMatch(controller = "玩家"), varname = "instance");
    }
    actions {
        deltaHp(actorCode = "instance", value = RECOVERY_FORMULA);
    }
}

block pressZ {
    __repeat__ = -1;
    triggers {
        keyboardPressed(varName = "instance", key = "Z");
    }
    actions {
        actorTalk(actorId = "{instance.id}", text = STATUS_TEXT);
    }
}

block staffAttack {
    __repeat__ = -1;
    triggers {
        actorFire(weapon = "custom_wind_staff", varName = "instance");
    }
    actions {
        enblastEffect(fromActor = "instance", toAngle = INSTANCE_ANGLE, scale = "0.5", damage = WIND_STAFF_ENBLAST_DAMAGE);
    }
}

block swordAttack {
    __repeat__ = -1;
    triggers {
        actorHit(actor = ActorMatch(), actorVarName = "instance", hitter = ActorMatch(), hitterVarName = "attacker", weapon = "custom_iron_sword");
    }
    actions {
        deltaHp(actorCode = "instance", casterCode = "attacker", type = "流血受傷", value = "{attacker.STR}*3");
    }
}

block newPlayer {
    __repeat__ = -1;
    triggers {
        actorAdded(actor = ActorMatch(controller = "player"), varName = "instance");
    }
    actions {
        setObjectVar(key = "STR", object = "instance", type = "integer", value = 0);
        setObjectVar(key = "CON", object = "instance", type = "integer", value = 0);
        setObjectVar(key = "AGI", object = "instance", type = "integer", value = 0);
        setObjectVar(key = "INT", object = "instance", type = "integer", value = 0);
        setObjectVar(key = "PSY", object = "instance", type = "integer", value = 0);
        setObjectVar(key = "Level", object = "instance", type = "integer", value = 1);
        setObjectVar(key = "Point", object = "instance", type = "integer", value = 5);
        setObjectVar(key = "Exp", object = "instance", type = "integer", value = 0);
        setObjectVar(key = "ExpNeeded", object = "instance", type = "integer", value = 6);
        setObjectVar(key = "HP", object = "instance", type = "integer", value = 100);
        getUserState(category = USER_STATE_CATEGORY, key = "savedBefore", playerId = "{instance}", varName = "{instance}_savedBefore");
        setObjectVar(key = "completedInit", object = "instance", type = "integer", value = 1);
    }
}

block init {
    actions {
        setWeaponAbility(weapon = "小刀", operation = "無技能", level = 1);
        setWeaponAbility(weapon = "小刀", operation = "無技能", level = 2);
        setWeaponAbility(weapon = "custom_wind_staff");
        setWeaponAbility(weapon = "custom_iron_sword");
        addStuff(x = 4, y = 8, item = "custom_wind_staff");
        addStuff(x = 4, y = 8, item = "custom_wind_staff");
        addStuff(x = 4, y = 8, item = "custom_wind_staff");
        addStuff(x = 4, y = 8, item = "custom_wind_staff");
        addStuff(x = 4, y = 8, item = "custom_wind_staff");
        addMapSign(x = 4, y = 7, rotation = 90, text = "【法杖】\n武器傷害：5\n - 攻擊附帶傷害為【10+智慧+精神/2】的光彈\n技能：釋出5發光彈", showButtons = false);
        addMapSign(x = 6, y = 7, rotation = 90, text = "【鐵劍】\n武器傷害：【30+力量*3】\n技能：恢復四分之一的血量", showButtons = false);
        biMapWarp(x1 = 19, y1 = 9, x2 = 21, y2 = 9);
        biMapWarp(x1 = 19, y1 = 10, x2 = 21, y2 = 10);
        addStuff(x = 6, y = 8, item = "custom_iron_sword");
        addStuff(x = 6, y = 8, item = "custom_iron_sword");
        addStuff(x = 6, y = 8, item = "custom_iron_sword");
        addStuff(x = 6, y = 8, item = "custom_iron_sword");
        addStuff(x = 6, y = 8, item = "custom_iron_sword");
        addMapSign(x = 3, y = 17, rotation = 270, text = "【力量】\n消耗一點能力點，提升劍類傷害", buttonCode = "increaseSTR", buttonLabel = "確認");
        addMapSign(x = 5, y = 17, rotation = 270, text = "【體質】\n消耗一點能力點，增加十點血量上限及半點恢復力", buttonCode = "increaseCON", buttonLabel = "確認");
        addMapSign(x = 7, y = 17, rotation = 270, text = "【敏捷】\n消耗一點能力點，重量減少3%，並提升武器攻擊速度", buttonCode = "increaseAGI", buttonLabel = "確認");
        addMapSign(x = 9, y = 17, rotation = 270, text = "【智慧】\n消耗一點能力點，提升杖類傷害", buttonCode = "increaseINT", buttonLabel = "確認");
        addMapSign(x = 11, y = 17, rotation = 270, text = "【精神】\n消耗一點能力點，小量提升杖類傷害及提升一點恢復力", buttonCode = "increasePSY", buttonLabel = "確認");
        addMapSign(x = 1, y = 15, rotation = 0, text = "【重置能力點分配】", buttonCode = "ResetPoint", buttonLabel = "確認");
    }
}